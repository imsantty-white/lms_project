import React, { useEffect, useState } from 'react';
import { useForm } from 'react-hook-form';
import { useNavigate, useParams, Link } from 'react-router-dom';
import groupService from '../../services/groupService';
import { useAuth } from '../../contexts/AuthContext'; // For role checks or user info if needed

const GroupFormPage = () => {
  const { groupId } = useParams(); // For edit mode
  const isEditMode = Boolean(groupId);
  const navigate = useNavigate();
  const { user } = useAuth(); // Ensure user is a teacher, though ProtectedRoute should handle this

  const { register, handleSubmit, setValue, formState: { errors }, reset } = useForm();
  const [loading, setLoading] = useState(false);
  const [formError, setFormError] = useState(null); // Error from API calls
  const [pageTitle, setPageTitle] = useState('Create Group');

  useEffect(() => {
    if (isEditMode && groupId) {
      setPageTitle('Edit Group');
      setLoading(true);
      groupService.getGroupById(groupId)
        .then(group => {
          setValue('name', group.name);
          setValue('description', group.description);
          // Note: Group code is usually generated by backend and might not be editable.
          // If it is, add: setValue('code', group.code);
          setLoading(false);
        })
        .catch(err => {
          console.error("Failed to fetch group details:", err);
          setFormError(err.message || 'Failed to load group data.');
          setLoading(false);
          // Optionally redirect if group not found or not authorized
          // navigate('/teacher/groups');
        });
    } else {
      setPageTitle('Create New Group');
      reset(); // Reset form for create mode
    }
  }, [groupId, isEditMode, setValue, reset]);

  const onSubmit = async (data) => {
    setLoading(true);
    setFormError(null);
    try {
      if (isEditMode) {
        await groupService.updateGroup(groupId, data);
      } else {
        await groupService.createGroup(data);
      }
      navigate('/teacher/groups'); // Redirect after successful operation
    } catch (err) {
      console.error("Form submission error:", err);
      setFormError(err.message || `Failed to ${isEditMode ? 'update' : 'create'} group.`);
    } finally {
      setLoading(false);
    }
  };

  if (loading && isEditMode && !isEditMode) { // Show loading only when fetching data for edit
    return <div className="p-4 text-center">Loading group details...</div>;
  }

  return (
    <div className="container mx-auto p-6 max-w-2xl">
      <h1 className="text-3xl font-bold text-gray-800 mb-6">{pageTitle}</h1>
      
      <form onSubmit={handleSubmit(onSubmit)} className="bg-white p-8 rounded-lg shadow-md space-y-6">
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700">
            Group Name
          </label>
          <input
            id="name"
            type="text"
            {...register('name', { required: 'Group name is required' })}
            className={`mt-1 block w-full px-3 py-2 border ${
              errors.name ? 'border-red-500' : 'border-gray-300'
            } rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm`}
          />
          {errors.name && (
            <p className="mt-1 text-sm text-red-600">{errors.name.message}</p>
          )}
        </div>

        <div>
          <label htmlFor="description" className="block text-sm font-medium text-gray-700">
            Description
          </label>
          <textarea
            id="description"
            rows="4"
            {...register('description', { required: 'Description is required' })}
            className={`mt-1 block w-full px-3 py-2 border ${
              errors.description ? 'border-red-500' : 'border-gray-300'
            } rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm`}
          />
          {errors.description && (
            <p className="mt-1 text-sm text-red-600">{errors.description.message}</p>
          )}
        </div>

        {/* Group code is usually generated by backend. If you allow setting it from frontend:
        {!isEditMode && ( // Example: Only allow setting code on creation
          <div>
            <label htmlFor="code" className="block text-sm font-medium text-gray-700">
              Group Code (Optional - will be auto-generated if left blank)
            </label>
            <input
              id="code"
              type="text"
              {...register('code')} // Add validation if needed
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
          </div>
        )}
        */}

        {formError && (
          <p className="text-sm text-red-600 text-center bg-red-100 p-3 rounded-md">{formError}</p>
        )}

        <div className="flex items-center justify-end space-x-4">
          <Link
            to="/teacher/groups"
            className="px-4 py-2 text-sm font-medium text-gray-700 border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            Cancel
          </Link>
          <button
            type="submit"
            disabled={loading}
            className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400"
          >
            {loading ? (isEditMode ? 'Updating...' : 'Creating...') : (isEditMode ? 'Update Group' : 'Create Group')}
          </button>
        </div>
      </form>
    </div>
  );
};

export default GroupFormPage;
